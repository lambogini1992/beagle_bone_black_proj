From f408693d239e8f437b62a5e2e3cf4b08b1b0f5b3 Mon Sep 17 00:00:00 2001
From: lambogini1992 <lambogini1992@gmail.com>
Date: Tue, 3 Oct 2023 20:14:45 +0700
Subject: [PATCH] Enable GPIO custome device with output and input interrupt

---
 arch/arm/boot/dts/overlays/CUSTOM_GPIOS.dts |  27 ++
 arch/arm/boot/dts/overlays/Makefile         |   1 +
 arch/arm/configs/bb.org_defconfig           |   1 +
 drivers/leds/Kconfig                        |   5 +
 drivers/leds/Makefile                       |   3 +
 drivers/leds/custom_gpio.c                  | 323 ++++++++++++++++++++
 6 files changed, 360 insertions(+)
 create mode 100644 arch/arm/boot/dts/overlays/CUSTOM_GPIOS.dts
 create mode 100644 drivers/leds/custom_gpio.c

diff --git a/arch/arm/boot/dts/overlays/CUSTOM_GPIOS.dts b/arch/arm/boot/dts/overlays/CUSTOM_GPIOS.dts
new file mode 100644
index 000000000000..4adecce9eeea
--- /dev/null
+++ b/arch/arm/boot/dts/overlays/CUSTOM_GPIOS.dts
@@ -0,0 +1,27 @@
+/dts-v1/;
+/plugin/;
+
+#include <dt-bindings/board/am335x-bone-pins.h>
+#include <dt-bindings/gpio/gpio.h>
+#include <dt-bindings/pinctrl/am33xx.h>
+
+&{/chosen} {
+	overlays {
+		CUSTOM_GPIO.kernel = __TIMESTAMP__;
+	};
+};
+
+&ocp {
+    P9_11_pinmux { pinctrl-0 = <&P9_11_gpio_pin>; };
+    P9_13_pinmux { pinctrl-0 = <&P9_13_gpio_pin>; };
+};
+
+&{/} {
+
+	custom_gpio: custome_gpio{
+        compatible = "custome_gpio";
+        output-gpios = <gpio_P9_11 GPIO_ACTIVE_HIGH>;
+        input-gpios = <gpio_P9_13 GPIO_ACTIVE_HIGH>;
+        status = "okay";
+    };
+};
diff --git a/arch/arm/boot/dts/overlays/Makefile b/arch/arm/boot/dts/overlays/Makefile
index 7083ccb01c29..f80d3c14be77 100644
--- a/arch/arm/boot/dts/overlays/Makefile
+++ b/arch/arm/boot/dts/overlays/Makefile
@@ -37,6 +37,7 @@ dtbo-$(CONFIG_ARCH_OMAP2PLUS) += \
 	M-BB-BBGG-00A0.dtbo	\
 	PB-HACKADAY-2021.dtbo	\
 	PB-MIKROBUS-0.dtbo	\
+	CUSTOM_GPIOS.dtbo \
 	PB-MIKROBUS-1.dtbo
 
 targets += dtbs dtbs_install
diff --git a/arch/arm/configs/bb.org_defconfig b/arch/arm/configs/bb.org_defconfig
index 6bf0fb860683..cb303e062b73 100644
--- a/arch/arm/configs/bb.org_defconfig
+++ b/arch/arm/configs/bb.org_defconfig
@@ -2798,3 +2798,4 @@ CONFIG_SCHEDSTATS=y
 CONFIG_BUG_ON_DATA_CORRUPTION=y
 # CONFIG_STRICT_DEVMEM is not set
 # CONFIG_RUNTIME_TESTING_MENU is not set
+CONFIG_LEDS_CUSTOM_GPIO=m
\ No newline at end of file
diff --git a/drivers/leds/Kconfig b/drivers/leds/Kconfig
index 56e8198e13d1..67057528ea1e 100644
--- a/drivers/leds/Kconfig
+++ b/drivers/leds/Kconfig
@@ -933,3 +933,8 @@ comment "LED Triggers"
 source "drivers/leds/trigger/Kconfig"
 
 endif # NEW_LEDS
+
+config LEDS_CUSTOM_GPIO
+	tristate "LED Custom GPIO Support"
+	help
+	  Enable to run custom GPIO Beagle DTBO
\ No newline at end of file
diff --git a/drivers/leds/Makefile b/drivers/leds/Makefile
index 73e603e1727e..1e6ebd23d828 100644
--- a/drivers/leds/Makefile
+++ b/drivers/leds/Makefile
@@ -105,3 +105,6 @@ obj-$(CONFIG_LEDS_USER)			+= uleds.o
 
 # LED Triggers
 obj-$(CONFIG_LEDS_TRIGGERS)		+= trigger/
+
+$(info $$CONFIG_LEDS_CUSTOM_GPIO is [${CONFIG_LEDS_CUSTOM_GPIO}])
+obj-$(CONFIG_LEDS_CUSTOM_GPIO)		+= custom_gpio.o
diff --git a/drivers/leds/custom_gpio.c b/drivers/leds/custom_gpio.c
new file mode 100644
index 000000000000..d37717053891
--- /dev/null
+++ b/drivers/leds/custom_gpio.c
@@ -0,0 +1,323 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <linux/interrupt.h>
+//for platform drivers....
+#include <linux/of_device.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/slab.h>
+#include <linux/cdev.h>
+#include <linux/device.h>
+#include <linux/uaccess.h>
+
+
+#define DRIVER_NAME "Sample_Pldrv"
+
+MODULE_LICENSE("GPL");
+
+struct custom_gpio_dev
+{
+	struct device *dev;
+	dev_t dev_num;
+	struct class *class;
+	struct cdev cdev;
+    struct gpio_desc *gpio_out;
+    struct gpio_desc *gpio_input;
+    int irq_gpio_number;
+    int state_output;
+};
+
+
+static irqreturn_t gpio_irq_handler(int irq,void *dev_id)
+{
+    //Signal to another app know what happend
+    return IRQ_HANDLED;
+}
+
+/*
+** This function will be called when we open the Misc device file
+*/
+static int custom_gpio_open(struct inode *inode, struct file *file)
+{
+    int ret;
+    struct custom_gpio_dev *gpio_dev;
+
+    gpio_dev= container_of(inode->i_cdev, struct custom_gpio_dev, cdev);
+    file->private_data = gpio_dev;
+
+    pr_info("open was unsucessful\n");
+
+    return 0;
+}
+/*
+** This function will be called when we close the Misc Device file
+*/
+static int custom_gpio_close(struct inode *inodep, struct file *filp)
+{
+    printk(KERN_INFO "Custom GPIO device close\n");
+    return 0;
+}
+/*
+** This function will be called when we write the Misc Device file
+*/
+static ssize_t custom_gpio_write(struct file *file, const char __user *buf,
+               size_t len, loff_t *ppos)
+{
+    printk(KERN_INFO "Custom GPIO device write\n");
+    struct custom_gpio_dev *gpio_dev;
+    char *str_user;
+    int ret;
+
+    gpio_dev = file->private_data;
+    if(!gpio_dev)
+    {
+		printk(KERN_ERR "File dont have private data\n");
+        return -ENOMEM;
+    }
+
+	str_user = kzalloc(len, GFP_KERNEL);
+	if(NULL == str_user)
+	{
+		printk(KERN_ERR "fail to allocate str_user\n");
+		return 0;
+	}
+
+	if(copy_from_user(str_user, buf, len))
+	{
+		printk(KERN_ERR "fail to get data from user buffer\n");
+        ret = -EFAULT;
+        goto exit_func;
+	}
+
+    ret = len;
+    printk(KERN_ERR "User Set GPIO value %s", str_user);
+    if(strncmp(str_user, "1", 1) == 0)
+    {
+        gpio_dev->state_output = 1;
+    }
+    else if(strncmp(str_user, "0", 1) == 0)
+    {
+        gpio_dev->state_output = 0;
+    }
+    else
+    {
+        printk(KERN_ERR "User CMD not support %s", str_user);
+    }
+    gpiod_set_value(gpio_dev->gpio_out, gpio_dev->state_output);
+
+    /* We are not doing anything with this data now */
+exit_func:
+    kfree(str_user);
+    return ret;
+
+}
+
+/*
+** This function will be called when we read the Misc Device file
+*/
+static ssize_t custom_gpio_read(struct file *filp, char __user *buf,
+                    size_t count, loff_t *f_pos)
+{
+    printk(KERN_INFO "Custom GPIO device read\n");
+
+    return 0;
+}
+
+
+//File operation structure
+static const struct file_operations custom_gpio_fops = {
+    .owner          = THIS_MODULE,
+    .write          = custom_gpio_write,
+    .read           = custom_gpio_read,
+    .open           = custom_gpio_open,
+    .release        = custom_gpio_close,
+    .llseek         = no_llseek,
+};
+
+
+/***************/
+static const struct of_device_id custom_gpio_of_dev[]=
+{
+	{ .compatible = "custome_gpio", },
+	{0},
+};
+
+MODULE_DEVICE_TABLE(of,custom_gpio_of_dev);
+
+/**************/
+static int sample_drv_probe(struct platform_device *pdev)
+{
+	printk("Initialize Driver\n");
+    int error;
+    struct custom_gpio_dev *custgpio_dev;
+	const struct  of_device_id *match;
+    int gpio_no;
+
+	match = of_match_device(custom_gpio_of_dev, &(pdev->dev));
+	if(!match)
+	{
+		printk(KERN_ERR "Fail to matching device and device table\n");
+		return -EINVAL;
+	}
+
+    custgpio_dev = kzalloc(sizeof(struct custom_gpio_dev), GFP_KERNEL);
+    if(!custgpio_dev)
+    {
+		printk(KERN_ERR "Fail to Allocate memory\n");
+		return -ENOMEM;
+    }
+
+    custgpio_dev->gpio_out = devm_gpiod_get(&pdev->dev, "output", GPIOD_OUT_LOW);
+	if (IS_ERR(custgpio_dev->gpio_out)) {
+		printk(KERN_ERR  "failed to get output gpio\n");
+		error = PTR_ERR(custgpio_dev->gpio_out);
+		goto init_failed;
+	}
+
+    custgpio_dev->gpio_input = devm_gpiod_get(&pdev->dev, "input", GPIOD_IN);
+	if (IS_ERR(custgpio_dev->gpio_input)) {
+		printk(KERN_ERR  "failed to get input gpio\n");
+		error = PTR_ERR(custgpio_dev->gpio_input);
+		goto init_failed;
+	}
+
+    gpio_no =  desc_to_gpio(custgpio_dev->gpio_out);
+    if(!gpio_is_valid(gpio_no))
+    {
+		printk(KERN_ERR  "GPIO OUTPUT is invalid\n");
+        error = -2;
+        goto init_failed;
+    }
+    pr_info("GPIO OUTPUT number %d", gpio_no);
+
+    gpio_no =  desc_to_gpio(custgpio_dev->gpio_input);
+    if(!gpio_is_valid(gpio_no))
+    {
+		printk(KERN_ERR  "GPIO is invalid\n");
+        error = -2;
+        goto init_failed;
+    }
+    pr_info("GPIO Input number %d", gpio_no);
+
+    //set interrupt for input gpio
+    custgpio_dev->irq_gpio_number =  gpio_to_irq(gpio_no);
+    pr_info("GPIO IRQ number %d", custgpio_dev->irq_gpio_number);
+
+    error = request_irq(custgpio_dev->irq_gpio_number, (void *)gpio_irq_handler,
+                        IRQF_TRIGGER_RISING,
+                        "custom_gpio_irq", NULL);
+    if(error)
+    {
+        printk(KERN_ERR "Failed to register interrupt %d\r\n", error);
+        goto init_failed;
+    }
+
+
+
+	error = alloc_chrdev_region(&custgpio_dev->dev_num, 0, 1, "custom_gpio");
+	if(error)
+	{
+		pr_err("Failed to major number for device file %d\r\n", error);
+        error = -1;
+        goto failed_alloc_dev;
+	}
+	pr_info("Kernel Module Infor MAJOR=%d MINOR=%d\r\n", MAJOR(custgpio_dev->dev_num), MINOR(custgpio_dev->dev_num));
+
+	custgpio_dev->class = class_create(THIS_MODULE, "custom_gpio_class");
+	if(IS_ERR(custgpio_dev->class))
+	{
+		pr_err("Failed to create class device %d\r\n", error);
+		goto failed_create_class;
+	}
+
+	custgpio_dev->dev = device_create(custgpio_dev->class, NULL, custgpio_dev->dev_num, NULL, "custom_gpio_dev");
+	if (IS_ERR(custgpio_dev->dev))
+    {
+		error = PTR_ERR(custgpio_dev->dev);
+		pr_err("Failed to create device %d\r\n", error);
+		goto failed_create_device;
+	}
+
+	cdev_init(&custgpio_dev->cdev, &custom_gpio_fops);
+
+	error = cdev_add(&custgpio_dev->cdev, custgpio_dev->dev_num, 1);
+	if(error < 0)
+	{
+		pr_err("Failed to create cdev %d\r\n", error);
+		goto failed_create_cdev;
+	}
+
+
+	pr_info("Kernel Module Inserted Successfully...\n");
+    platform_set_drvdata(pdev, custgpio_dev);
+    custgpio_dev->state_output = 0;
+    gpiod_set_value(custgpio_dev->gpio_out, custgpio_dev->state_output);
+	return 0;
+
+failed_create_cdev:
+	device_destroy(custgpio_dev->class,custgpio_dev->dev_num);
+failed_create_device:
+	class_destroy(custgpio_dev->class);
+failed_create_class:
+	unregister_chrdev_region(custgpio_dev->dev_num, 1);
+failed_alloc_dev:
+    free_irq(custgpio_dev->irq_gpio_number, NULL);
+init_failed:
+    kfree(custgpio_dev);
+    return error;
+}
+static int sample_drv_remove(struct platform_device *pdev)
+{
+    struct custom_gpio_dev *custgpio_dev;
+	printk(KERN_INFO "Remove driver\n");
+    custgpio_dev = (struct custom_gpio_dev *)platform_get_drvdata(pdev);
+
+	cdev_del(&custgpio_dev->cdev);
+	device_destroy(custgpio_dev->class,custgpio_dev->dev_num);
+	class_destroy(custgpio_dev->class);
+	unregister_chrdev_region(custgpio_dev->dev_num, 1);
+    free_irq(custgpio_dev->irq_gpio_number, NULL);
+    kfree(custgpio_dev);
+	return 0;
+}
+
+static struct platform_driver sample_pldriver = {
+    .probe          = sample_drv_probe,
+    .remove         = sample_drv_remove,
+    .driver = {
+            .name  = DRIVER_NAME,
+            .owner = THIS_MODULE,
+            .of_match_table = of_match_ptr(custom_gpio_of_dev),
+    },
+};
+/**************/
+
+static int __init ourinitmodule(void)
+{
+    printk(KERN_ALERT "Welcome to sample Platform driver.... \n");
+
+    /* Registering with Kernel */
+    int error = platform_driver_register(&sample_pldriver);
+	printk("Return for register sample driver %d\r\n", error);
+    return 0;
+}
+
+static void __exit ourcleanupmodule(void)
+{
+    printk(KERN_ALERT "Thanks....Exiting sample Platform driver... \n");
+
+    /* Unregistering from Kernel */
+    platform_driver_unregister(&sample_pldriver);
+
+    return;
+}
+
+module_init(ourinitmodule);
+module_exit(ourcleanupmodule);
+
+MODULE_DESCRIPTION("Platform device and driver example");
+MODULE_AUTHOR("PTA");
+MODULE_LICENSE("GPL v2");
\ No newline at end of file
-- 
2.34.1

